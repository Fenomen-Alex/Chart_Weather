{"version":3,"sources":["components/GeoForm.tsx","components/WeatherChart.tsx","App.tsx","index.tsx"],"names":["Geocode","setApiKey","GeoForm","setLatLng","useState","value","setValue","getLatLng","useCallback","address","fromAddress","then","res","results","geometry","location","lat","lng","useEffect","onSubmit","e","preventDefault","handleSubmit","type","onChange","target","defaults","plugins","legend","display","days","labels","Array","map","_","i","date","Date","setDate","getDate","getDay","options","responsive","maintainAspectRatio","aspectRatio","tooltips","node","intersect","scales","xAxes","gridLines","ticks","fontColor","fontSize","padding","yAxes","WeatherChart","latLng","datasets","setDatasets","formatWeatherData","data","label","backgroundColor","borderColor","daily","day","temp","max","min","a","fetch","json","formattedData","getWeatherData","className","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oNAGAA,IAAQC,UAAU,2CAElB,IA+BeC,EA/BC,SAAC,GAA4C,IAA1CC,EAAyC,EAAzCA,UAAyC,EAEhCC,mBAAS,QAFuB,mBAEnDC,EAFmD,KAE5CC,EAF4C,KAIpDC,EAAYC,uBAAY,SAACC,GAC7BT,IAAQU,YAAYD,GACfE,MAAK,SAACC,GAAS,IAAD,EACQA,EAAIC,QAAQ,GAAGC,SAASC,SAArCC,EADK,EACLA,IAAKC,EADA,EACAA,IACbd,EAAU,CAACa,MAAKC,aAEtB,IAUF,OAJAC,qBAAU,WACRX,EAAUF,KACV,IAGE,0BAAMc,SAAU,SAACC,GAAD,OAVC,SAACA,GACpBA,EAAEC,iBACFd,EAAUF,GAQeiB,CAAaF,KAClC,2BACIG,KAAK,OACLlB,MAAOA,EACPmB,SAAU,SAACJ,GAAD,OAAOd,EAASc,EAAEK,OAAOpB,Y,wCC1B/CqB,IAASC,QAAQC,OAAOC,SAAU,EAElC,IAAMC,EAAO,CACX,SACA,SACA,UACA,YACA,WACA,SACA,YAEIC,EAAS,YAAIC,MAAM,IAAIC,KAAI,SAACC,EAAGC,GACnC,IAAMC,EAAO,IAAIC,KAEjB,OADAD,EAAKE,QAAQF,EAAKG,UAAYJ,GACvBL,EAAKM,EAAKI,aAEbC,EAAU,CACdC,YAAY,EACZC,qBAAqB,EACrBC,YAAa,EACbC,SAAU,CAACC,KAAM,QAASC,WAAW,GACrCC,OAAQ,CACNC,MAAO,CACL,CACEC,WAAW,EACXC,MAAO,CACLC,UAAW,UACXC,SAAU,GACVC,QAAS,MAIfC,MAAO,CACL,CACEL,WAAW,EACXC,MAAO,CACLC,UAAW,UACXC,SAAU,GACVC,QAAS,QAoDJE,EAzCM,SAAC,GAAsC,IAArCC,EAAoC,EAApCA,OAAoC,EAEzBrD,mBAAoB,IAFK,mBAElDsD,EAFkD,KAExCC,EAFwC,KA8BzD,OA1BAzC,qBAAU,WACR,IAAM0C,EAAoB,SAACC,GACzB,MAAO,CACL,CACEC,MAAO,QACPC,gBAAiB,UACjBC,YAAa,UACbH,KAAMA,EAAKI,MAAMhC,KAAI,SAACiC,GAAD,OAAS,EAAI,GAAKA,EAAIC,KAAKC,IAAM,QAExD,CACEN,MAAO,OACPC,gBAAiB,UACjBC,YAAa,UACbH,KAAMA,EAAKI,MAAMhC,KAAI,SAACiC,GAAD,OAAS,EAAI,GAAKA,EAAIC,KAAKE,IAAM,WAIxC,uCAAG,gCAAAC,EAAA,sEACHC,MAAM,GAAD,OA1Bd,iIA0Bc,gBAAkBd,EAAOzC,IAAzB,gBAAoCyC,EAAOxC,MAD7C,cACfL,EADe,gBAEFA,EAAI4D,OAFF,OAEfX,EAFe,OAGfY,EAAgBb,EAAkBC,GACxCF,EAAYc,GAJS,2CAAH,qDAMpBC,KACC,CAACjB,IAGA,yBAAKkB,UAAU,SACb,kBAAC,IAAD,CACIpD,KAAK,MACLkB,QAASA,EACToB,KAAM,CAAE9B,SAAQ2B,gBCrEbkB,G,OAbH,WAAO,IAAD,EACYxE,mBAA4B,MADxC,mBACTqD,EADS,KACDtD,EADC,KAGhB,OACE,yBAAKwE,UAAU,OAEb,kBAAC,EAAD,CAASxE,UAAWA,IAEnBsD,GAAU,kBAAC,EAAD,CAAcA,OAAQA,OCVvCoB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.20a54741.chunk.js","sourcesContent":["import React, {useCallback, useEffect, useState} from 'react';\r\nimport Geocode from 'react-geocode';\r\n\r\nGeocode.setApiKey(\"AIzaSyDp4os33WF6-4d-xFVyL0HsUUHN7dOml_w\");\r\n\r\nconst GeoForm = ({ setLatLng }: { setLatLng: Function }) => {\r\n\r\n  const [value, setValue] = useState('Kyiv');\r\n\r\n  const getLatLng = useCallback((address: string) => {\r\n    Geocode.fromAddress(address)\r\n        .then((res) => {\r\n          const { lat, lng } = res.results[0].geometry.location;\r\n          setLatLng({lat, lng})\r\n        })\r\n  },[]);\r\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    getLatLng(value);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getLatLng(value);\r\n  },[]);\r\n\r\n  return (\r\n      <form onSubmit={(e) => handleSubmit(e)}>\r\n        <input\r\n            type=\"text\"\r\n            value={value}\r\n            onChange={(e) => setValue(e.target.value)}\r\n        />\r\n      </form>\r\n  )\r\n};\r\n\r\nexport default GeoForm;\r\n","import React, {useEffect, useState} from 'react';\r\nimport {Dataset, LatLngType, Weather} from '../types';\r\nimport {Bar, defaults} from 'react-chartjs-2';\r\n\r\ndefaults.plugins.legend.display = false;\r\n\r\nconst days = [\r\n  'Sunday',\r\n  'Monday',\r\n  'Tuesday',\r\n  'Wednesday',\r\n  'Thursday',\r\n  'Friday',\r\n  'Saturday'\r\n];\r\nconst labels = [...Array(7)].map((_, i) => {\r\n  const date = new Date();\r\n  date.setDate(date.getDate() + i);\r\n  return days[date.getDay()];\r\n});\r\nconst options = {\r\n  responsive: true,\r\n  maintainAspectRatio: true,\r\n  aspectRatio: 1,\r\n  tooltips: {node: 'index', intersect: false},\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        gridLines: false,\r\n        ticks: {\r\n          fontColor: '#F680BC',\r\n          fontSize: 10,\r\n          padding: 20\r\n        }\r\n      }\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: false,\r\n        ticks: {\r\n          fontColor: '#F680BC',\r\n          fontSize: 10,\r\n          padding: 20\r\n        }\r\n      }\r\n    ]\r\n  }\r\n};\r\n\r\nconst apiUrl = 'https://api.openweathermap.org/data/2.5/onecall?'\r\n    + '&exclude=hourly,minutely&units=imperial'\r\n    + '&appid=bb96c7f9ac6f57dc00333727c5407547';\r\n\r\nconst WeatherChart = ({latLng}: { latLng: LatLngType }) => {\r\n\r\n  const [datasets, setDatasets] = useState<Dataset[]>([]);\r\n\r\n  useEffect(() => {\r\n    const formatWeatherData = (data: Weather): Dataset[] => {\r\n      return [\r\n        {\r\n          label: 'Highs',\r\n          backgroundColor: '#EC9CAC',\r\n          borderColor: '#EC9CAC',\r\n          data: data.daily.map((day) => 5 / 9 * (day.temp.max - 32))\r\n        },\r\n        {\r\n          label: 'Lows',\r\n          backgroundColor: '#9CCAF6',\r\n          borderColor: '#9CCAF6',\r\n          data: data.daily.map((day) => 5 / 9 * (day.temp.min - 32))\r\n        }\r\n      ]\r\n    };\r\n    const getWeatherData = async (): Promise<void> => {\r\n      const res = await fetch(`${apiUrl}&lat=${latLng.lat}&lon=${latLng.lng}`);\r\n      const data = await res.json();\r\n      const formattedData = formatWeatherData(data);\r\n      setDatasets(formattedData);\r\n    };\r\n    getWeatherData();\r\n  }, [latLng])\r\n\r\n  return (\r\n      <div className=\"chart\">\r\n        <Bar\r\n            type=\"bar\"\r\n            options={options}\r\n            data={{ labels, datasets }}\r\n        />\r\n      </div>\r\n  );\r\n};\r\n\r\nexport default WeatherChart;\r\n","import React, {useState} from 'react';\nimport GeoForm from './components/GeoForm';\nimport WeatherChart from './components/WeatherChart';\nimport {LatLngType} from './types';\nimport './App.css';\n\nconst App = () => {\n  const [latLng, setLatLng] = useState<null | LatLngType>(null);\n\n  return (\n    <div className=\"app\">\n      {/* form goes here */}\n      <GeoForm setLatLng={setLatLng} />\n      {/* chart goes here */}\n      {latLng && <WeatherChart latLng={latLng}/>}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}